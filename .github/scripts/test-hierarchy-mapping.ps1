# Testar mapeamento de hierarquia

Write-Host "Verificando mapeamento de hierarquia..."

# Simular a estrutura esperada
$expectedHierarchy = @{
    "E-commerce de Ve√≠culos - Documenta√ß√£o" = @()
    "Sistemas" = @("Vitrine de Ve√≠culos", "Backoffice de Ve√≠culos")
    "Vitrine de Ve√≠culos" = @("Busca de Ve√≠culos", "Arquitetura - Vitrine de Ve√≠culos")
    "Backoffice de Ve√≠culos" = @("Arquitetura - Backoffice de Ve√≠culos", "Cadastro de An√∫ncios")
    "Arquitetura" = @("Sobre ADRs")
    "Componentes" = @("Vitrine Web", "Vitrine API", "Vitrine BFF", "Backoffice Web", "Backoffice API", "Backoffice BFF", "Pipelines E-commerce")
    "Vitrine Web" = @("Arquitetura", "Setup")
    "Vitrine API" = @("API Reference")
    "Pipelines E-commerce" = @("Automa√ß√£o - Pipelines", "Workflows - Pipelines")
    "Guias" = @("Guia de Contribui√ß√£o")
}

Write-Host ""
Write-Host "=== ESTRUTURA ESPERADA ==="
foreach ($parent in $expectedHierarchy.Keys) {
    Write-Host "üìÅ $parent"
    foreach ($child in $expectedHierarchy[$parent]) {
        Write-Host "  ‚îî‚îÄ‚îÄ $child"
    }
}

Write-Host ""
Write-Host "=== ORDEM DE DELE√á√ÉO ESPERADA ==="
Write-Host "1. Documentos sem filhos (folhas):"
$leaves = @()
foreach ($parent in $expectedHierarchy.Keys) {
    foreach ($child in $expectedHierarchy[$parent]) {
        if (-not $expectedHierarchy.ContainsKey($child)) {
            $leaves += $child
        }
    }
}
$leaves | Sort-Object | ForEach-Object { Write-Host "  - $_" }

Write-Host ""
Write-Host "2. Documentos pais (ap√≥s filhos deletados):"
$parents = $expectedHierarchy.Keys | Sort-Object
$parents | ForEach-Object { Write-Host "  - $_" }

Write-Host ""
Write-Host "Mapeamento verificado!"

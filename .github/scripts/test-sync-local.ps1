# Script para testar a sincroniza√ß√£o localmente
param(
    [string]$ApiUrl = "https://outline-production-cebc.up.railway.app",
    [string]$ApiToken = "ol_api_2yNCdA9PywEilrGBTTZswHV5hYemUhIRMTgi4A"
)

Write-Host "üß™ Teste Local - Sincroniza√ß√£o Outline" -ForegroundColor Cyan
Write-Host "=" * 50 -ForegroundColor Cyan

# Verificar se Python est√° dispon√≠vel
Write-Host "üîç Verificando Python..." -ForegroundColor Yellow
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python encontrado: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python n√£o encontrado. Instalando..." -ForegroundColor Red
    
    # Tentar instalar Python via winget
    try {
        winget install Python.Python.3.11
        Write-Host "‚úÖ Python instalado via winget" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Falha ao instalar Python. Instale manualmente." -ForegroundColor Red
        exit 1
    }
}

# Verificar se o arquivo de mapeamento existe
Write-Host "`nüìÑ Verificando arquivo de mapeamento..." -ForegroundColor Yellow
if (Test-Path "outline-mapping.yaml") {
    Write-Host "‚úÖ outline-mapping.yaml encontrado" -ForegroundColor Green
} else {
    Write-Host "‚ùå outline-mapping.yaml n√£o encontrado" -ForegroundColor Red
    exit 1
}

# Verificar se o script Python existe
Write-Host "`nüêç Verificando script Python..." -ForegroundColor Yellow
if (Test-Path ".github\scripts\sync_working.py") {
    Write-Host "‚úÖ sync_working.py encontrado" -ForegroundColor Green
} else {
    Write-Host "‚ùå sync_working.py n√£o encontrado" -ForegroundColor Red
    exit 1
}

# Configurar vari√°veis de ambiente
Write-Host "`nüîß Configurando vari√°veis de ambiente..." -ForegroundColor Yellow
$env:OUTLINE_API_URL = $ApiUrl
$env:OUTLINE_API_TOKEN = $ApiToken

Write-Host "   OUTLINE_API_URL: $ApiUrl" -ForegroundColor White
Write-Host "   OUTLINE_API_TOKEN: $($ApiToken.Substring(0, 20))..." -ForegroundColor White

# Testar conectividade primeiro
Write-Host "`nüîó Testando conectividade..." -ForegroundColor Yellow
try {
    $headers = @{
        'Authorization' = "Bearer $ApiToken"
        'Content-Type' = 'application/json'
        'Accept' = 'application/json'
    }
    
    $body = @{ id = "" }
    $response = Invoke-RestMethod -Uri "$ApiUrl/api/collections.list" -Headers $headers -Method Post -Body ($body | ConvertTo-Json) -TimeoutSec 10
    
    Write-Host "‚úÖ Conectividade OK - $($response.data.Count) cole√ß√µes encontradas" -ForegroundColor Green
    
    foreach ($collection in $response.data) {
        Write-Host "   - $($collection.name) (ID: $($collection.id))" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Falha na conectividade: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Executar o script Python
Write-Host "`nüöÄ Executando sincroniza√ß√£o..." -ForegroundColor Yellow
Write-Host "=" * 30 -ForegroundColor Yellow

try {
    python .github\scripts\sync_working.py
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host "`nüéâ Sincroniza√ß√£o conclu√≠da com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "`nüí• Sincroniza√ß√£o falhou com c√≥digo: $LASTEXITCODE" -ForegroundColor Red
    }
} catch {
    Write-Host "`nüí• Erro ao executar script: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüìã Teste local conclu√≠do!" -ForegroundColor Cyan
